
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from assets.transform import transform_int as tr
from decimal import Decimal
from assets.antispam import antispam, antispam_earning, new_earning
from bot import bot
import time
import sqlite3
import random
import os

from commands.db import conn as conngdb, cursor as cursorgdb
from commands.main import CONFIG as HELLO_CONFIG
from commands.help import CONFIG as HELP_CONFIG
from user import BFGuser

router = Router()

# –†–µ–¥–∫–æ—Å—Ç–∏ –∫–∞–∫ –≤ CS:GO
RARITIES = {
    "Consumer Grade": {"chance": 79.2, "color": "‚ö™", "multiplier": 1, "price_color": "#B0C3D9"},
    "Industrial Grade": {"chance": 15.98, "color": "üîµ", "multiplier": 3, "price_color": "#5E98D9"},
    "Mil-Spec": {"chance": 3.2, "color": "üü£", "multiplier": 10, "price_color": "#4B69FF"},
    "Restricted": {"chance": 0.64, "color": "üü£", "multiplier": 30, "price_color": "#8847FF"},
    "Classified": {"chance": 0.26, "color": "üü†", "multiplier": 80, "price_color": "#D32CE6"},
    "Covert": {"chance": 0.26, "color": "üî¥", "multiplier": 200, "price_color": "#EB4B4B"},
    "Extraordinary": {"chance": 0.26, "color": "üíé", "multiplier": 1000, "price_color": "#FFD700"},
    "Contraband": {"chance": 0.001, "color": "üü§", "multiplier": 5000, "price_color": "#FF5500"}
}

# –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–∏–Ω—ã –∏–∑ CS:GO)
ITEMS = {
    "–ü–∏—Å—Ç–æ–ª–µ—Ç—ã": {
        "Consumer Grade": ["P250 | Sand Dune", "Glock-18 | Night", "USP-S | Forest Leaves"],
        "Industrial Grade": ["P250 | Muertos", "Glock-18 | Bunsen Burner", "USP-S | Guardian"],
        "Mil-Spec": ["Desert Eagle | Bronze Deco", "R8 Revolver | Reboot", "Five-SeveN | Candy Apple"],
        "Restricted": ["Desert Eagle | Directive", "Glock-18 | Water Elemental", "P250 | Asiimov"],
        "Classified": ["USP-S | Kill Confirmed", "Desert Eagle | Blaze", "Glock-18 | Twilight Galaxy"],
        "Covert": ["Desert Eagle | Printstream", "Glock-18 | Fade", "P250 | Nevermore"],
        "Extraordinary": ["‚òÖ Karambit", "‚òÖ Butterfly Knife"],
        "Contraband": ["‚òÖ M9 Bayonet | Lore"]
    },
    "–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏": {
        "Consumer Grade": ["AK-47 | Safari Mesh", "M4A4 | Urban DDPAT", "M4A1-S | Boreal Forest"],
        "Industrial Grade": ["AK-47 | Elite Build", "M4A4 | Dragon King", "M4A1-S | Leaded Glass"],
        "Mil-Spec": ["AK-47 | Redline", "M4A4 | Evil Daimyo", "M4A1-S | Hyper Beast"],
        "Restricted": ["AK-47 | Vulcan", "M4A4 | Asiimov", "M4A1-S | Golden Coil"],
        "Classified": ["AK-47 | Fire Serpent", "M4A4 | Howl", "M4A1-S | Chantico's Fire"],
        "Covert": ["AK-47 | Bloodsport", "M4A4 | Poseidon", "M4A1-S | Nightmare"],
        "Extraordinary": ["‚òÖ Bayonet", "‚òÖ M9 Bayonet"],
        "Contraband": ["‚òÖ Karambit | Fade"]
    },
    "–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏": {
        "Consumer Grade": ["AWP | Worm God", "SSG 08 | Abyss", "SCAR-20 | Carbon Fiber"],
        "Industrial Grade": ["AWP | Phobos", "SSG 08 | Mainframe", "SCAR-20 | Powercore"],
        "Mil-Spec": ["AWP | Electric Hive", "SSG 08 | Dragonfire", "SCAR-20 | Bloodsport"],
        "Restricted": ["AWP | Hyper Beast", "SSG 08 | Blood in the Water", "SCAR-20 | Assault"],
        "Classified": ["AWP | Lightning Strike", "SSG 08 | Big Iron", "SCAR-20 | Enforcer"],
        "Covert": ["AWP | Dragon Lore", "AWP | Gungnir", "SSG 08 | Sea Calico"],
        "Extraordinary": ["‚òÖ Huntsman Knife", "‚òÖ Falchion Knife"],
        "Contraband": ["‚òÖ Butterfly Knife | Fade"]
    },
    "–ù–æ–∂–∏": {
        "Consumer Grade": ["‚òÖ Shadow Daggers | Forest DDPAT"],
        "Industrial Grade": ["‚òÖ Falchion Knife | Urban Masked"],
        "Mil-Spec": ["‚òÖ Gut Knife | Boreal Forest"],
        "Restricted": ["‚òÖ Flip Knife | Night"],
        "Classified": ["‚òÖ M9 Bayonet | Crimson Web"],
        "Covert": ["‚òÖ Karambit | Case Hardened"],
        "Extraordinary": ["‚òÖ Butterfly Knife | Fade", "‚òÖ Karambit | Doppler"],
        "Contraband": ["‚òÖ M9 Bayonet | Lore (Factory New)"]
    },
    "–ü–µ—Ä—á–∞—Ç–∫–∏": {
        "Classified": ["‚òÖ Driver Gloves | King Snake"],
        "Covert": ["‚òÖ Sport Gloves | Vice"],
        "Extraordinary": ["‚òÖ Specialist Gloves | Emerald Web"],
        "Contraband": ["‚òÖ Sport Gloves | Pandora's Box"]
    }
}

# –¶–µ–Ω—ã –∫–µ–π—Å–æ–≤
CASE_PRICES = {
    "weapon": 1000,      # –û–±—ã—á–Ω—ã–π –∫–µ–π—Å —Å –æ—Ä—É–∂–∏–µ–º
    "premium": 5000,     # –ü—Ä–µ–º–∏—É–º –∫–µ–π—Å
    "knife": 25000,      # –ö–µ–π—Å —Å –Ω–æ–∂–∞–º–∏
    "elite": 100000,     # –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å
    "gloves": 50000      # –ö–µ–π—Å —Å –ø–µ—Ä—á–∞—Ç–∫–∞–º–∏
}

class CSMarketDB:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö users.db
        self.users_conn = sqlite3.connect('users.db')
        self.users_cursor = self.users_conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –±–∞–∑—É –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞
        os.makedirs('modules/temp', exist_ok=True)
        market_db_path = 'modules/temp/cs_market.db'
        self.market_conn = sqlite3.connect(market_db_path)
        self.market_cursor = self.market_conn.cursor()
        self.create_market_tables()

    def create_market_tables(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã)"""
        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        self.market_cursor.execute('''
            CREATE TABLE IF NOT EXISTS cs_inventory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                item_name TEXT,
                rarity TEXT,
                category TEXT,
                price INTEGER,
                float_value REAL DEFAULT 0.0,
                is_stattrak BOOLEAN DEFAULT 0,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞ (–ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É)
        self.market_cursor.execute('''
            CREATE TABLE IF NOT EXISTS cs_market (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                item_id INTEGER,
                item_name TEXT,
                rarity TEXT,
                category TEXT,
                price INTEGER,
                float_value REAL DEFAULT 0.0,
                is_stattrak BOOLEAN DEFAULT 0,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (item_id) REFERENCES cs_inventory (id)
            )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.market_cursor.execute('''
            CREATE TABLE IF NOT EXISTS cs_market_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                buyer_id INTEGER,
                seller_id INTEGER,
                item_name TEXT,
                price INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ–π—Å–æ–≤
        self.market_cursor.execute('''
            CREATE TABLE IF NOT EXISTS cs_user_stats (
                user_id INTEGER PRIMARY KEY,
                cases_opened INTEGER DEFAULT 0,
                total_spent INTEGER DEFAULT 0,
                total_earned INTEGER DEFAULT 0,
                reputation INTEGER DEFAULT 100
            )''')
        
        self.market_conn.commit()

    # –†–∞–±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö users
    async def get_user_balance(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã"""
        result = self.users_cursor.execute(
            'SELECT balance FROM users WHERE userid = ?', (user_id,)
        ).fetchone()
        return result[0] if result else 0

    async def update_user_balance(self, user_id, amount):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ"""
        current_balance = await self.get_user_balance(user_id)
        new_balance = current_balance + amount
        self.users_cursor.execute(
            'UPDATE users SET balance = ? WHERE userid = ?', 
            (new_balance, user_id)
        )
        self.users_conn.commit()
        return new_balance

    # –†–∞–±–æ—Ç–∞ —Å –º–∞—Ä–∫–µ—Ç-–±–∞–∑–æ–π
    async def reg_user_stats(self, user_id):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–∞—Ä–∫–µ—Ç–∞"""
        ex = self.market_cursor.execute(
            'SELECT user_id FROM cs_user_stats WHERE user_id = ?', (user_id,)
        ).fetchone()
        if not ex:
            self.market_cursor.execute(
                'INSERT INTO cs_user_stats (user_id) VALUES (?)', (user_id,)
            )
            self.market_conn.commit()

    async def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.reg_user_stats(user_id)
        return self.market_cursor.execute(
            'SELECT * FROM cs_user_stats WHERE user_id = ?', (user_id,)
        ).fetchone()

    async def add_to_inventory(self, user_id, item_name, rarity, category, price, float_value=0.0, is_stattrak=False):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
        await self.reg_user_stats(user_id)
        self.market_cursor.execute(
            'INSERT INTO cs_inventory (user_id, item_name, rarity, category, price, float_value, is_stattrak) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (user_id, item_name, rarity, category, price, float_value, is_stattrak)
        )
        self.market_conn.commit()
        return self.market_cursor.lastrowid

    async def get_inventory(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.reg_user_stats(user_id)
        return self.market_cursor.execute(
            'SELECT * FROM cs_inventory WHERE user_id = ? ORDER BY timestamp DESC', 
            (user_id,)
        ).fetchall()

    async def get_inventory_item(self, user_id, item_id):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        await self.reg_user_stats(user_id)
        return self.market_cursor.execute(
            'SELECT * FROM cs_inventory WHERE id = ? AND user_id = ?', 
            (item_id, user_id)
        ).fetchone()

    async def remove_from_inventory(self, user_id, item_id):
        """–£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        await self.reg_user_stats(user_id)
        self.market_cursor.execute(
            'DELETE FROM cs_inventory WHERE id = ? AND user_id = ?', 
            (item_id, user_id)
        )
        self.market_conn.commit()

    async def add_to_market(self, user_id, item_id, price):
        """–í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç"""
        item = await self.get_inventory_item(user_id, item_id)
        if not item:
            return False
        
        self.market_cursor.execute(
            'INSERT INTO cs_market (user_id, item_id, item_name, rarity, category, price, float_value, is_stattrak) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            (user_id, item_id, item[2], item[3], item[4], price, item[6], item[7])
        )
        self.market_conn.commit()
        return True

    async def get_market_items(self, category=None, rarity=None, page=0, limit=10):
        """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–∞"""
        query = 'SELECT * FROM cs_market WHERE 1=1'
        params = []
        
        if category:
            query += ' AND category = ?'
            params.append(category)
        if rarity:
            query += ' AND rarity = ?'
            params.append(rarity)
            
        query += ' ORDER BY price ASC LIMIT ? OFFSET ?'
        params.extend([limit, page * limit])
        
        return self.market_cursor.execute(query, params).fetchall()

    async def get_market_item(self, market_id):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –º–∞—Ä–∫–µ—Ç–∞"""
        return self.market_cursor.execute(
            'SELECT * FROM cs_market WHERE id = ?', (market_id,)
        ).fetchone()

    async def remove_from_market(self, market_id):
        """–£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –º–∞—Ä–∫–µ—Ç–∞"""
        self.market_cursor.execute(
            'DELETE FROM cs_market WHERE id = ?', (market_id,)
        )
        self.market_conn.commit()

    async def buy_from_market(self, buyer_id, market_id):
        """–ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –º–∞—Ä–∫–µ—Ç–∞"""
        market_item = await self.get_market_item(market_id)
        if not market_item:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer_balance = await self.get_user_balance(buyer_id)
        if buyer_balance < market_item[6]:
            return False
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await self.update_user_balance(buyer_id, -market_item[6])
        await self.update_user_balance(market_item[1], market_item[6])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        await self.add_to_inventory(
            buyer_id, market_item[3], market_item[4], market_item[5], 
            market_item[6], market_item[7], market_item[8]
        )
        
        # –£–¥–∞–ª—è–µ–º —Å –º–∞—Ä–∫–µ—Ç–∞
        await self.remove_from_market(market_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        await self.remove_from_inventory(market_item[1], market_item[2])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.market_cursor.execute(
            'INSERT INTO cs_market_history (buyer_id, seller_id, item_name, price) VALUES (?, ?, ?, ?)',
            (buyer_id, market_item[1], market_item[3], market_item[6])
        )
        
        self.market_conn.commit()
        return True

    async def record_case_opened(self, user_id, spent, earned):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞"""
        await self.reg_user_stats(user_id)
        self.market_cursor.execute(
            'UPDATE cs_user_stats SET cases_opened = cases_opened + 1, total_spent = total_spent + ?, total_earned = total_earned + ? WHERE user_id = ?',
            (spent, earned, user_id)
        )
        self.market_conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = CSMarketDB()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CS Market: {e}")
    db = None

def get_random_item(case_type):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞"""
    if case_type == "knife":
        categories = ["–ù–æ–∂–∏"]
    elif case_type == "gloves":
        categories = ["–ü–µ—Ä—á–∞—Ç–∫–∏"]
    elif case_type == "elite":
        categories = ["–ü–∏—Å—Ç–æ–ª–µ—Ç—ã", "–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏", "–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏", "–ù–æ–∂–∏"]
    else:
        categories = ["–ü–∏—Å—Ç–æ–ª–µ—Ç—ã", "–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏", "–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏"]
    
    category = random.choice(categories)
    
    # –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤ CS:GO
    rand = random.random() * 100
    cumulative = 0
    selected_rarity = "Consumer Grade"
    
    for rarity, data in RARITIES.items():
        cumulative += data["chance"]
        if rand <= cumulative:
            selected_rarity = rarity
            break
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    items_in_category = ITEMS[category].get(selected_rarity, [])
    if not items_in_category:
        selected_rarity = "Consumer Grade"
        items_in_category = ITEMS[category]["Consumer Grade"]
    
    item_name = random.choice(items_in_category)
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º float –∏ stattrack
    base_price = CASE_PRICES[case_type]
    price = int(base_price * RARITIES[selected_rarity]["multiplier"])
    
    # Float value (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–∞)
    float_value = round(random.uniform(0.0, 1.0), 4)
    
    # StatTrak —à–∞–Ω—Å (10% –¥–ª—è –æ—Ä—É–∂–∏—è, 100% –¥–ª—è –Ω–æ–∂–µ–π)
    is_stattrak = random.random() < 0.1 if category != "–ù–æ–∂–∏" and category != "–ü–µ—Ä—á–∞—Ç–∫–∏" else True
    
    if is_stattrak:
        item_name = "StatTrak‚Ñ¢ " + item_name
        price = int(price * 1.5)
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ float
    if float_value < 0.07:  # Factory New
        price = int(price * 2.0)
    elif float_value < 0.15:  # Minimal Wear
        price = int(price * 1.5)
    elif float_value < 0.38:  # Field-Tested
        price = int(price * 1.2)
    elif float_value < 0.45:  # Well-Worn
        price = int(price * 1.1)
    # Battle-Scarred - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    
    return {
        "name": item_name,
        "rarity": selected_rarity,
        "category": category,
        "price": price,
        "color": RARITIES[selected_rarity]["color"],
        "float_value": float_value,
        "is_stattrak": is_stattrak
    }

def get_float_quality(float_value):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∏–Ω–∞ –ø–æ float value"""
    if float_value < 0.07:
        return "Factory New"
    elif float_value < 0.15:
        return "Minimal Wear"
    elif float_value < 0.38:
        return "Field-Tested"
    elif float_value < 0.45:
        return "Well-Worn"
    else:
        return "Battle-Scarred"

def cases_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–æ–≤"""
    keyboards = InlineKeyboardMarkup(row_width=2)
    keyboards.add(
        InlineKeyboardButton("üî´ –û—Ä—É–∂–∏–µ (1,000$)", callback_data="case_weapon"),
        InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º (5,000$)", callback_data="case_premium"),
        InlineKeyboardButton("üî™ –ù–æ–∂–∏ (25,000$)", callback_data="case_knife"),
        InlineKeyboardButton("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ (50,000$)", callback_data="case_gloves"),
        InlineKeyboardButton("üëë –≠–ª–∏—Ç–Ω—ã–π (100,000$)", callback_data="case_elite")
    )
    keyboards.add(
        InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory"),
        InlineKeyboardButton("üè™ –ú–∞—Ä–∫–µ—Ç", callback_data="market")
    )
    return keyboards

def market_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞"""
    keyboards = InlineKeyboardMarkup(row_width=2)
    keyboards.add(
        InlineKeyboardButton("üî´ –û—Ä—É–∂–∏–µ", callback_data="market_weapons"),
        InlineKeyboardButton("üî™ –ù–æ–∂–∏", callback_data="market_knives"),
        InlineKeyboardButton("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏", callback_data="market_gloves")
    )
    keyboards.add(
        InlineKeyboardButton("üìà –î–µ—à–µ–≤—ã–µ", callback_data="market_cheap"),
        InlineKeyboardButton("üíé –î–æ—Ä–æ–≥–∏–µ", callback_data="market_expensive")
    )
    keyboards.add(InlineKeyboardButton("üéí –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory"))
    return keyboards

@router.message(F.text.lower() == '–∫–µ–π—Å—ã')
@antispam
async def cases_menu(message: Message, user: BFGuser):
    if not db:
        await message.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    user_balance = await db.get_user_balance(user.user_id)
    user_stats = await db.get_user_stats(user.user_id)
    
    text = f'''üéÆ <b>CS2 Case Opening</b>

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{tr(user_balance)}$</code>
üì¶ –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: <code>{user_stats[1]}</code>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:</b>
üî´ –û—Ä—É–∂–∏–µ - 1,000$ (–æ–±—ã—á–Ω—ã–µ —Å–∫–∏–Ω—ã)
üíé –ü—Ä–µ–º–∏—É–º - 5,000$ (—Ä–µ–¥–∫–∏–µ —Å–∫–∏–Ω—ã)  
üî™ –ù–æ–∂–∏ - 25,000$ (—Ç–æ–ª—å–∫–æ –Ω–æ–∂–∏)
üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ - 50,000$ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä—á–∞—Ç–∫–∏)
üëë –≠–ª–∏—Ç–Ω—ã–π - 100,000$ (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

üéØ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞–∫ –≤ CS:GO
‚Ä¢ Float value (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–∞)
‚Ä¢ StatTrak‚Ñ¢ –≤–µ—Ä—Å–∏–∏
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏'''

    await message.answer(text, reply_markup=cases_kb())

@router.callback_query(F.data.startswith('case_'))
@antispam_earning
async def open_case(call: CallbackQuery, user: BFGuser):
    if not db:
        await call.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', show_alert=True)
        return
    
    case_type = call.data.split('_')[1]
    price = CASE_PRICES[case_type]
    
    user_balance = await db.get_user_balance(user.user_id)
    
    if user_balance < price:
        await call.answer(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {tr(price)}$', show_alert=True)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    await db.update_user_balance(user.user_id, -price)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å
    item = get_random_item(case_type)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    item_id = await db.add_to_inventory(
        user.user_id, item["name"], item["rarity"], item["category"], 
        item["price"], item["float_value"], item["is_stattrak"]
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.record_case_opened(user.user_id, price, item["price"])
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    msg = await call.message.edit_text(f"{user.url}, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...\n\nüéÅ | ‚ùì")
    
    try:
        for i in range(3):
            await asyncio.sleep(0.5)
            symbols = ["üéÅ", "‚ú®", "üíé"]
            await msg.edit_text(f"{user.url}, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...\n\n{symbols[i]} | ‚ùì")
        
        await asyncio.sleep(1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
        quality = get_float_quality(item["float_value"])
        stattrack_text = " ‚úÖ StatTrak‚Ñ¢" if item["is_stattrak"] else ""
        
        result_text = f'''{user.url}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å!

{item["color"]} <b>{item["name"]}</b>{stattrack_text}
üìä –†–µ–¥–∫–æ—Å—Ç—å: <b>{item["rarity"]}</b>
üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{item["category"]}</b>
‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: <b>{quality}</b>
üî¢ Float: <code>{item["float_value"]}</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{tr(item["price"])}$</code>

üíµ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!'''
        
        await msg.edit_text(result_text, reply_markup=cases_kb())
    except Exception as e:
        await call.message.answer(f"{user.url}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞")

@router.callback_query(F.data == 'inventory')
@antispam_earning
async def show_inventory(call: CallbackQuery, user: BFGuser):
    if not db:
        await call.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', show_alert=True)
        return
    
    inventory = await db.get_inventory(user.user_id)
    
    if not inventory:
        await call.message.answer(f'{user.url}, –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!', reply_markup=cases_kb())
        return
    
    text = f"üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {user.name}</b>\n\n"
    total_value = 0
    
    for item in inventory[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        item_id, user_id, item_name, rarity, category, price, float_value, is_stattrak, timestamp = item
        quality = get_float_quality(float_value)
        stattrack_text = " ‚úÖ StatTrak‚Ñ¢" if is_stattrak else ""
        
        text += f"{RARITIES[rarity]['color']} <b>{item_name}</b>{stattrack_text}\n"
        text += f"   üìä {rarity} | üéØ {category}\n"
        text += f"   ‚≠ê {quality} | üî¢ {float_value}\n"
        text += f"   üí∞ {tr(price)}$ | ID: {item_id}\n"
        text += f"   üè™ <code>–ø—Ä–æ–¥–∞—Ç—å {item_id} [—Ü–µ–Ω–∞]</code>\n\n"
        total_value += price
    
    text += f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{tr(total_value)}$</code>"
    
    if len(inventory) > 8:
        text += f"\n\nüìÅ ... –∏ –µ—â–µ {len(inventory) - 8} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    
    await call.message.answer(text, reply_markup=cases_kb())

@router.message(F.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å '))
@antispam
async def sell_item(message: Message, user: BFGuser):
    if not db:
        await message.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    try:
        parts = message.text.split()
        item_id = int(parts[1])
        price = int(parts[2])
    except:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ø—Ä–æ–¥–∞—Ç—å [ID] [—Ü–µ–Ω–∞]</code>')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    item = await db.get_inventory_item(user.user_id, item_id)
    if not item:
        await message.answer('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É (–º–∏–Ω–∏–º—É–º 100$)
    if price < 100:
        await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: 100$')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç
    success = await db.add_to_market(user.user_id, item_id, price)
    
    if success:
        await message.answer(f'‚úÖ {user.url}, –ø—Ä–µ–¥–º–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –º–∞—Ä–∫–µ—Ç!\n\n'
                           f'{RARITIES[item[3]]["color"]} <b>{item[2]}</b>\n'
                           f'üí∞ –¶–µ–Ω–∞: <code>{tr(price)}$</code>\n\n'
                           f'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä–∫–µ—Ç–∞: <code>–º–∞—Ä–∫–µ—Ç</code>')
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç')

@router.message(F.text.lower() == '–º–∞—Ä–∫–µ—Ç')
@router.callback_query(F.data == 'market')
@antispam
async def market_menu(message: Message, user: BFGuser):
    if not db:
        await message.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    text = '''üè™ <b>CS2 Market</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–∫–∏–Ω—ã:

‚Ä¢ üî´ –û—Ä—É–∂–∏–µ - –≤—Å–µ —Ç–∏–ø—ã –æ—Ä—É–∂–∏—è
‚Ä¢ üî™ –ù–æ–∂–∏ - —Ç–æ–ª—å–∫–æ –Ω–æ–∂–∏  
‚Ä¢ üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä—á–∞—Ç–∫–∏
‚Ä¢ üìà –î–µ—à–µ–≤—ã–µ - —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ üíé –î–æ—Ä–æ–≥–∏–µ - –ø—Ä–µ–º–∏—É–º –ø—Ä–µ–¥–º–µ—Ç—ã

–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:
<code>–ø—Ä–æ–¥–∞—Ç—å [ID] [—Ü–µ–Ω–∞]</code>'''
    
    if isinstance(message, CallbackQuery):
        await message.message.answer(text, reply_markup=market_kb())
    else:
        await message.answer(text, reply_markup=market_kb())

@router.callback_query(F.data.startswith('market_'))
@antispam_earning
async def show_market(call: CallbackQuery, user: BFGuser):
    if not db:
        await call.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', show_alert=True)
        return
    
    market_type = call.data.split('_')[1]
    
    if market_type == "weapons":
        items = await db.get_market_items(category="–ü–∏—Å—Ç–æ–ª–µ—Ç—ã")
        items.extend(await db.get_market_items(category="–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏"))
        items.extend(await db.get_market_items(category="–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏"))
        title = "üî´ –û—Ä—É–∂–∏–µ"
    elif market_type == "knives":
        items = await db.get_market_items(category="–ù–æ–∂–∏")
        title = "üî™ –ù–æ–∂–∏"
    elif market_type == "gloves":
        items = await db.get_market_items(category="–ü–µ—Ä—á–∞—Ç–∫–∏")
        title = "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏"
    elif market_type == "cheap":
        items = await db.get_market_items()
        items = sorted(items, key=lambda x: x[6])[:10]  # 10 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö
        title = "üìà –î–µ—à–µ–≤—ã–µ"
    elif market_type == "expensive":
        items = await db.get_market_items()
        items = sorted(items, key=lambda x: x[6], reverse=True)[:10]  # 10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö
        title = "üíé –î–æ—Ä–æ–≥–∏–µ"
    else:
        items = await db.get_market_items()
        title = "üè™ –í–µ—Å—å –º–∞—Ä–∫–µ—Ç"
    
    if not items:
        await call.message.answer(f'üì≠ –ù–∞ –º–∞—Ä–∫–µ—Ç–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{title}"')
        return
    
    text = f'üè™ <b>{title}</b>\n\n'
    
    for item in items[:8]:
        market_id, user_id, item_id, item_name, rarity, category, price, float_value, is_stattrak, timestamp = item
        quality = get_float_quality(float_value)
        stattrack_text = " ‚úÖ StatTrak‚Ñ¢" if is_stattrak else ""
        
        text += f"{RARITIES[rarity]['color']} <b>{item_name}</b>{stattrack_text}\n"
        text += f"   üìä {rarity} | üéØ {category}\n"
        text += f"   ‚≠ê {quality} | üî¢ {float_value}\n"
        text += f"   üí∞ <code>{tr(price)}$</code> | ID: {market_id}\n"
        text += f"   üõí <code>–∫—É–ø–∏—Ç—å {market_id}</code>\n\n"
    
    if len(items) > 8:
        text += f"üìÅ ... –∏ –µ—â–µ {len(items) - 8} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
    
    await call.message.answer(text, reply_markup=market_kb())

@router.message(F.text.lower().startswith('–∫—É–ø–∏—Ç—å '))
@antispam
async def buy_item(message: Message, user: BFGuser):
    if not db:
        await message.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    try:
        market_id = int(message.text.split()[1])
    except:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫—É–ø–∏—Ç—å [ID]</code>')
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    success = await db.buy_from_market(user.user_id, market_id)
    
    if success:
        await message.answer(f'‚úÖ {user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å –º–∞—Ä–∫–µ—Ç–∞!')
    else:
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —É–∂–µ –∫—É–ø–∏–ª–∏ –∏–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')

@router.message(F.text.lower() == '—Ç–æ–ø –∫–µ–π—Å—ã')
@antispam
async def top_cases(message: Message, user: BFGuser):
    if not db:
        await message.answer('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤
    top_players = db.market_cursor.execute(
        'SELECT user_id, cases_opened, total_earned FROM cs_user_stats ORDER BY cases_opened DESC LIMIT 10'
    ).fetchall()
    
    text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–µ–π—Å–∞–º</b>\n\n"
    
    for i, player in enumerate(top_players, 1):
        user_id, cases_opened, total_earned = player
        try:
            user_name = (await bot.get_chat(user_id)).first_name
        except:
            user_name = f"–ò–≥—Ä–æ–∫ {user_id}"
        
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üî∏"
        text += f"{medal} {user_name}\n"
        text += f"   üì¶ –ö–µ–π—Å–æ–≤: <code>{cases_opened}</code>\n"
        text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{tr(total_earned)}$</code>\n\n"
    
    await message.answer(text)

def register_handlers(dp):
    dp.include_router(router)

MODULE_DESCRIPTION = {
    'name': 'üéÆ CS2 Market',
    'description': '''–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ –∏ –º–∞—Ä–∫–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ CS2:
- –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ CS:GO
- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∏–Ω–æ–≤
- StatTrak‚Ñ¢ –≤–µ—Ä—Å–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
- –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
- Float value (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–æ–≤)

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ö–µ–π—Å—ã - –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤
‚Ä¢ –ú–∞—Ä–∫–µ—Ç - —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å [ID] [—Ü–µ–Ω–∞] - –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
‚Ä¢ –ö—É–ø–∏—Ç—å [ID] - –∫—É–ø–∏—Ç—å —Å –º–∞—Ä–∫–µ—Ç–∞
‚Ä¢ –¢–æ–ø –∫–µ–π—Å—ã - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤'''
}
